* @amory/style
:properties:
:header-args: :cache yes :comments no :mkdirp yes :padline yes :results silent
:end:
#+startup: showall nohideblocks hidestars indent

** Table of Contents                                                   :TOC:
- [[#amorystyle][@amory/style]]
  - [[#license][License]]
  - [[#source][Source]]
    - [[#utils][Utils]]
      - [[#camelcase][camelCase]]
      - [[#kebabcase][kebabCase]]

** License

#+begin_quote
Copyright 2019 [[https://github.com/ptb][Peter T Bosse II]]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#+end_quote

** Source

*** Utils

**** camelCase

#+HTML: <details>
#+begin_src js :tangle src/utils/camel-case.js
/**
 * Converts `string` to camel case.
 *
 * @param {string} string
 * - The string to convert.
 *
 * @returns {string}
 *   The camel cased string.
 */

export function camelCase (string = "") {
  return string.replace (/\x2D([a-z])/gu, function (_, a) {
    return a.toUpperCase ()
  })
}
#+end_src
#+HTML: </details>

#+HTML: <details>
#+begin_src js :tangle src/utils/camel-case.test.js
import ava from "ava"
import { camelCase } from "./camel-case.js"

ava ("given undefined arguments", (t) => {
  const actual = camelCase ()
  const expect = ""

  t.is (actual, expect)
})

ava ("given a string in kebab-case", (t) => {
  const actual = camelCase ("background-color")
  const expect = "backgroundColor"

  t.is (actual, expect)
})

ava ("given a string in camel-case", (t) => {
  const actual = camelCase ("backgroundColor")
  const expect = "backgroundColor"

  t.is (actual, expect)
})

ava ("given a string in lowercase", (t) => {
  const actual = camelCase ("background")
  const expect = "background"

  t.is (actual, expect)
})
#+end_src
#+HTML: </details>

**** kebabCase

#+HTML: <details>
#+begin_src js :tangle src/utils/kebab-case.js
/**
 * Converts `string` to kebab case.
 *
 * @param {string} string
 * - The string to convert.
 *
 * @returns {string}
 *   The kebab cased string.
 */

export function kebabCase (string = "") {
  return string.replace (/[A-Z]|^ms/gu, "-$&").toLowerCase ()
}
#+end_src
#+HTML: </details>

#+HTML: <details>
#+begin_src js :tangle src/utils/kebab-case.test.js
import ava from "ava"
import { kebabCase } from "./kebab-case.js"

ava ("given undefined arguments", (t) => {
  const actual = kebabCase ()
  const expect = ""

  t.is (actual, expect)
})

ava ("given a string in camel-case", (t) => {
  const actual = kebabCase ("backgroundColor")
  const expect = "background-color"

  t.is (actual, expect)
})

ava ("given a string beginning with 'ms-'", (t) => {
  const actual = kebabCase ("msAccelerator")
  const expect = "-ms-accelerator"

  t.is (actual, expect)
})

ava ("given a string already in kebab-case", (t) => {
  const actual = kebabCase ("background-color")
  const expect = "background-color"

  t.is (actual, expect)
})

ava ("given a string with lowercase characters", (t) => {
  const actual = kebabCase ("background")
  const expect = "background"

  t.is (actual, expect)
})
#+end_src
#+HTML: </details>
